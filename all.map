{"version":3,"sources":["Gruntfile.js"],"names":["module","exports","grunt","require","config","app","dist","initConfig","watch","bower","files","tasks","js","options","livereload","jstest","gruntfile","styles","babel","sourceMap","presets","all","connect","port","open","hostname","middleware","static","use","test","base","clean","dot","src","server","jshint","node","jshintrc","reporter","mocha","run","urls","autoprefixer","browsers","expand","cwd","dest","wiredep","ignorePath","exclude","rev","useminPrepare","html","usemin","assetsDirs","css","imagemin","svgmin","htmlmin","collapseBooleanAttributes","collapseWhitespace","conservativeCollapse","removeAttributeQuotes","removeCommentsFromCDATA","removeEmptyAttributes","removeOptionalTags","removeRedundantAttributes","useShortDoctype","copy","modernizr","devFile","outputFile","uglify","concurrent","registerTask","target","option","set","task","log","warn"],"mappings":"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","file":"all","sourcesContent":["// Generated on 2015-03-26 using\n// generator-webapp 0.5.1\n'use strict';\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// If you want to recursively match all subfolders, use:\n// 'test/spec/**/*.js'\n\nmodule.exports = function(grunt) {\n  // Time how long tasks take. Can help when optimizing build times\n  require('time-grunt')(grunt);\n\n  // Load grunt tasks automatically\n  require('load-grunt-tasks')(grunt);\n\n  // Configurable paths\n  var config = {\n    app: 'app',\n    dist: 'dist',\n  };\n\n  // Define the configuration for all the tasks\n  grunt.initConfig({\n    // Project settings\n    config: config,\n\n    // Watches files for changes and runs tasks based on the changed files\n    watch: {\n      bower: {\n        files: ['bower.json'],\n        tasks: ['wiredep'],\n      },\n      js: {\n        files: ['<%= config.app %>/scripts/{,*/}*.js'],\n        tasks: ['jshint', 'babel'],\n        options: {\n          livereload: true,\n        },\n      },\n      jstest: {\n        files: ['test/spec/{,*/}*.js'],\n        tasks: ['test:watch'],\n      },\n      gruntfile: {\n        files: ['Gruntfile.js'],\n      },\n      styles: {\n        files: ['<%= config.app %>/styles/{,*/}*.css'],\n        tasks: ['newer:copy:styles', 'autoprefixer'],\n      },\n      livereload: {\n        options: {\n          livereload: '<%= connect.options.livereload %>',\n        },\n        files: [\n          '<%= config.app %>/{,*/}*.html',\n          '.tmp/styles/{,*/}*.css',\n          '<%= config.app %>/images/{,*/}*',\n        ],\n      },\n    },\n\n    babel: {\n      options: {\n        sourceMap: true,\n        presets: ['env'],\n      },\n      all: ['Gruntfile.js', '<%= config.app %>/scripts/{,*/}*.js'],\n      dist: {\n        files: {\n          'dist/app.js': 'src/app.js',\n        },\n      },\n    },\n\n    // The actual grunt server settings\n    connect: {\n      options: {\n        port: 9000,\n        open: true,\n        livereload: 35729,\n        // Change this to '0.0.0.0' to access the server from outside\n        hostname: 'localhost',\n        // hostname: 'dev.lucasbittar.com'\n      },\n      livereload: {\n        options: {\n          middleware: function(connect) {\n            return [\n              connect.static('.tmp'),\n              connect().use(\n                '/bower_components',\n                connect.static('./bower_components')\n              ),\n              connect.static(config.app),\n            ];\n          },\n        },\n      },\n      test: {\n        options: {\n          open: false,\n          port: 9001,\n          middleware: function(connect) {\n            return [\n              connect.static('.tmp'),\n              connect.static('test'),\n              connect().use(\n                '/bower_components',\n                connect.static('./bower_components')\n              ),\n              connect.static(config.app),\n            ];\n          },\n        },\n      },\n      dist: {\n        options: {\n          base: '<%= config.dist %>',\n          livereload: false,\n        },\n      },\n    },\n\n    // Empties folders to start fresh\n    clean: {\n      dist: {\n        files: [\n          {\n            dot: true,\n            src: ['.tmp', '<%= config.dist %>/*', '!<%= config.dist %>/.git*'],\n          },\n        ],\n      },\n      server: '.tmp',\n    },\n\n    // Make sure code styles are up to par and there are no obvious mistakes\n    jshint: {\n      options: {\n        node: true,\n        jshintrc: '.jshintrc',\n        reporter: require('jshint-stylish'),\n      },\n      all: [\n        'Gruntfile.js',\n        '<%= config.app %>/scripts/{,*/}*.js',\n        '!<%= config.app %>/scripts/vendor/*',\n        'test/spec/{,*/}*.js',\n      ],\n    },\n\n    // Mocha testing framework configuration options\n    mocha: {\n      all: {\n        options: {\n          run: true,\n          urls: [\n            'http://<%= connect.test.options.hostname %>:<%= connect.test.options.port %>/index.html',\n          ],\n        },\n      },\n    },\n\n    // Add vendor prefixed styles\n    autoprefixer: {\n      options: {\n        browsers: ['> 1%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1'],\n      },\n      dist: {\n        files: [\n          {\n            expand: true,\n            cwd: '.tmp/styles/',\n            src: '{,*/}*.css',\n            dest: '.tmp/styles/',\n          },\n        ],\n      },\n    },\n\n    // Automatically inject Bower components into the HTML file\n    wiredep: {\n      app: {\n        ignorePath: /^\\/|\\.\\.\\//,\n        src: ['<%= config.app %>/index.html'],\n        exclude: ['bower_components/bootstrap/dist/js/bootstrap.js'],\n      },\n    },\n\n    // Renames files for browser caching purposes\n    rev: {\n      dist: {\n        files: {\n          src: [\n            '<%= config.dist %>/scripts/{,*/}*.js',\n            '<%= config.dist %>/styles/{,*/}*.css',\n            '<%= config.dist %>/images/{,*/}*.*',\n            '<%= config.dist %>/styles/fonts/{,*/}*.*',\n            '<%= config.dist %>/*.{ico,png}',\n          ],\n        },\n      },\n    },\n\n    // Reads HTML for usemin blocks to enable smart builds that automatically\n    // concat, minify and revision files. Creates configurations in memory so\n    // additional tasks can operate on them\n    useminPrepare: {\n      options: {\n        dest: '<%= config.dist %>',\n      },\n      html: '<%= config.app %>/index.html',\n    },\n\n    // Performs rewrites based on rev and the useminPrepare configuration\n    usemin: {\n      options: {\n        assetsDirs: [\n          '<%= config.dist %>',\n          '<%= config.dist %>/images',\n          '<%= config.dist %>/styles',\n        ],\n      },\n      html: ['<%= config.dist %>/{,*/}*.html'],\n      css: ['<%= config.dist %>/styles/{,*/}*.css'],\n    },\n\n    // The following *-min tasks produce minified files in the dist folder\n    imagemin: {\n      dist: {\n        files: [\n          {\n            expand: true,\n            cwd: '<%= config.app %>/images',\n            src: '{,*/}*.{gif,jpeg,jpg,png}',\n            dest: '<%= config.dist %>/images',\n          },\n        ],\n      },\n    },\n\n    svgmin: {\n      dist: {\n        files: [\n          {\n            expand: true,\n            cwd: '<%= config.app %>/images',\n            src: '{,*/}*.svg',\n            dest: '<%= config.dist %>/images',\n          },\n        ],\n      },\n    },\n\n    htmlmin: {\n      dist: {\n        options: {\n          collapseBooleanAttributes: true,\n          collapseWhitespace: true,\n          conservativeCollapse: true,\n          removeAttributeQuotes: true,\n          removeCommentsFromCDATA: true,\n          removeEmptyAttributes: true,\n          removeOptionalTags: true,\n          removeRedundantAttributes: true,\n          useShortDoctype: true,\n        },\n        files: [\n          {\n            expand: true,\n            cwd: '<%= config.dist %>',\n            src: '{,*/}*.html',\n            dest: '<%= config.dist %>',\n          },\n        ],\n      },\n    },\n\n    // By default, your `index.html`'s <!-- Usemin block --> will take care\n    // of minification. These next options are pre-configured if you do not\n    // wish to use the Usemin blocks.\n    // cssmin: {\n    //   dist: {\n    //     files: {\n    //       '<%= config.dist %>/styles/main.css': [\n    //         '.tmp/styles/{,*/}*.css',\n    //         '<%= config.app %>/styles/{,*/}*.css'\n    //       ]\n    //     }\n    //   }\n    // },\n    // uglify: {\n    //   dist: {\n    //     files: {\n    //       '<%= config.dist %>/scripts/scripts.js': [\n    //         '<%= config.dist %>/scripts/scripts.js'\n    //       ]\n    //     }\n    //   }\n    // },\n    // concat: {\n    //   dist: {}\n    // },\n\n    // Copies remaining files to places other tasks can use\n    copy: {\n      dist: {\n        files: [\n          {\n            expand: true,\n            dot: true,\n            cwd: '<%= config.app %>',\n            dest: '<%= config.dist %>',\n            src: [\n              '*.{ico,png,txt}',\n              'images/{,*/}*.webp',\n              '{,*/}*.html',\n              'styles/fonts/{,*/}*.*',\n            ],\n          },\n          {\n            src: 'node_modules/apache-server-configs/dist/.htaccess',\n            dest: '<%= config.dist %>/.htaccess',\n          },\n          {\n            expand: true,\n            dot: true,\n            cwd: 'bower_components/bootstrap/dist',\n            src: 'fonts/*',\n            dest: '<%= config.dist %>',\n          },\n        ],\n      },\n      styles: {\n        expand: true,\n        dot: true,\n        cwd: '<%= config.app %>/styles',\n        dest: '.tmp/styles/',\n        src: '{,*/}*.css',\n      },\n    },\n\n    // Generates a custom Modernizr build that includes only the tests you\n    // reference in your app\n    modernizr: {\n      dist: {\n        devFile: 'bower_components/modernizr/modernizr.js',\n        outputFile: '<%= config.dist %>/scripts/vendor/modernizr.js',\n        files: {\n          src: [\n            '<%= config.dist %>/scripts/{,*/}*.js',\n            '<%= config.dist %>/styles/{,*/}*.css',\n            '!<%= config.dist %>/scripts/vendor/*',\n          ],\n        },\n        uglify: true,\n      },\n    },\n\n    // Run some tasks in parallel to speed up build process\n    concurrent: {\n      server: ['copy:styles'],\n      test: ['copy:styles'],\n      dist: ['copy:styles', 'imagemin', 'svgmin'],\n    },\n  });\n\n  grunt.registerTask(\n    'serve',\n    'start the server and preview your app, --allow-remote for remote access',\n    function(target) {\n      if (grunt.option('allow-remote')) {\n        grunt.config.set('connect.options.hostname', '0.0.0.0');\n      }\n      if (target === 'dist') {\n        return grunt.task.run(['build', 'connect:dist:keepalive']);\n      }\n\n      grunt.task.run([\n        'clean:server',\n        'wiredep',\n        'concurrent:server',\n        'autoprefixer',\n        'connect:livereload',\n        'watch',\n      ]);\n    }\n  );\n\n  grunt.registerTask('server', function(target) {\n    grunt.log.warn(\n      'The `server` task has been deprecated. Use `grunt serve` to start a server.'\n    );\n    grunt.task.run([target ? 'serve:' + target : 'serve']);\n  });\n\n  grunt.registerTask('test', function(target) {\n    if (target !== 'watch') {\n      grunt.task.run(['clean:server', 'concurrent:test', 'autoprefixer']);\n    }\n\n    grunt.task.run(['connect:test', 'mocha']);\n  });\n\n  grunt.registerTask('build', [\n    'clean:dist',\n    'wiredep',\n    'useminPrepare',\n    'concurrent:dist',\n    'autoprefixer',\n    'concat',\n    'cssmin',\n    'uglify',\n    'copy:dist',\n    'modernizr',\n    'rev',\n    'usemin',\n    'htmlmin',\n  ]);\n\n  grunt.registerTask('default', ['newer:jshint', 'test', 'build']);\n};\n"]}